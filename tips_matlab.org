* funciones
** encabezado prog
   clear all;close all;clc
   warning('off','all'); % disable all warning
   addpath('~/Documents/CIMEC/Cursos/FEM/pract/funciones_auxiliares/')
   tStart = tic; % son timer de multivariables, para cuando hay muchos timers en el prog

   time = toc(tStart);
   fprintf('*-----------------------------------------------*\n')
   fprintf('\n\nFIN! - OK - time = %d[s].\n',time)

   %fprintf('Resolusion: %1.8f\n',h)
   %fprintf('Limite de iteraciones por punto: %d\n',maxiter)
   %fprintf('Tolerancia de convergencia: %1.3f\n\n',tol)

** cells
   son arreglos que almacen datos de distinto tipo, se definen con {}
*** example
    a = [1 2 3;4 5 6]
    s = 'el sapo pepe'
    t = [1:4]
    
    p = {a,s,t}
   
** csv
   coma-separate-value
*** csvwrite
    para guardar archivos csv 'coma-separate-value'
    csvwrite ('testingcscwrite.dat', data)
*** dlmread csvread
    para leer archivos csv 'coma-separate-value', ver si es matlab u octave
    x = dlmread('testingcscwrite.dat')
** data manipulation - external wrinting/reading
   https://es.mathworks.com/help/matlab/matlab_external/writing-and-reading-data.html
*** escribir datos
    completar
*** leer datos
    fgetl -> Leer una línea de texto desde el dispositivo y descartar el terminador
    fgets -> Lea una línea de texto del dispositivo e incluya el terminador
    fread -> Leer datos binarios del dispositivo
    fscanf -> Leer datos del dispositivo y formatear como texto
    readasync -> Leer datos asincrónicamente desde el dispositivo
    stopasync -> Detenga las operaciones asincrónicas de lectura y escritura
    textscan -> funcion para scannear donde le seteo q son los comentarios, etc. 
**** textscan 
   textscan.m es una funcion para scannear donde le seteo q son los
   comentarios, etc. 
   fscan.m esa es la standar de matlab
   A  = textscan(fid,['%f',repmat(' %f',1,3)],numnp,'CommentStyle','$',...
   'CollectOutPut',true);
   A  = A{1};

**** fscanf
     clear all;clc;close all
     fileID = fopen('CDvsAlpha.txt','r') %creo que tiene que estar sin comentarios
     formatSpec = '%f %f';
     sizeA = [2 Inf]; % lo escribe en vector fila, desp hacer transpuesta
     A = fscanf(fileID,formatSpec,sizeA)
     fclose(fileID)
*** csvread
    csvread() para leer datos en octave
    ver arriba en csv
** eps
   eps -> num a partir del cual empieza a tener en cuenta. El eps
   depende del numero alrededor del cual estamos
   1+(eps(1)) = 1.000000000000002
   1+(eps(1)/10) = 1 no tiene en cuenta el incremento

** eye
   crea matrix identidad
   I=eye(3)
** figure
   figure('Name','Nombre de la figure', 'NumberTitle', 'off')
   surf(X,Y,Z)
   xlabel('x');ylabel('y');zlabel('z=x^2/a^2 - y^2/b^2');
   xlim([-500 500])
   colormap(jet(20))  %hay diferentes gamas de colores (winter,summer,jet,etc)
   y el '20' representa cuantos bloques de colores quiero
   shading interp %es para sacar las lineas negras
   colorbar %agrega una escala para saber que numero representa cada color

   contour(X,Y,z) % lineas de nivel
   contourf(X,Y,z) % superficies de nivel
   
   surfc(X,Y,z) %Surfc es una funcion que convina surf con contour, es decir
   te grafica la superficie y abajo las lineas a nivel
*** exemples de lo anterior
**** mesh
     x= linspace(-3*pi, 3*pi, 50);
     y= linspace(-2*pi, 4*pi, 60);
     
     [X, Y] = meshgrid(x,y); %con esto me genero la grilla, es decir, donde será evaluada mi funcion
     
     z= sin(X).*cos(Y);
     
     figure
     mesh(X,Y,z)
     xlabel('x')
     ylabel('y')
     zlabel('z=sen(x)*cos(y)')
     view([23 57])
     grid on
     colorbar
     colormap(jet(20))
**** surf
     x= linspace(-3*pi, 3*pi, 50);
     y= linspace(-2*pi, 4*pi, 60);
     [X, Y] = meshgrid(x,y);
     
     z= sin(X).*cos(Y);
     
     figure
     surf(X,Y,z)
     xlabel('x')
     ylabel('y')
     zlabel('z=sen(x)*cos(y)')
     grid on
     view([23 57])
     shading interp %es para sacar las lineas negras
     colormap(jet(10))
     colorbar
**** contour
     x= linspace(-3*pi, 3*pi, 50);
     y= linspace(-2*pi, 4*pi, 60);
     [X, Y] = meshgrid(x,y);
     z= sin(X).*cos(Y);   
     figure
     subplot(2, 1, 1)
     contour(X,Y,z)
     xlabel('x')
     ylabel('y')
     zlabel('z=sen(x)*cos(y)')
     grid on
     colormap jet
     colorbar
     
     subplot(2,1,2)
     contourf(X,Y,z)
     xlabel('x')
     ylabel('y')
     zlabel('z=sen(x)*cos(y)')
     grid on
     colormap jet
     colorbar
**** surfc
     x= linspace(-3*pi, 3*pi, 50);
     y= linspace(-2*pi, 4*pi, 60);
     [X, Y] = meshgrid(x,y);
     z= sin(X).*cos(Y);
     figure
     surfc(X,Y,z)
     xlabel('x')
     ylabel('y')
     zlabel('z=sen(x)*cos(y)')
     grid on
     view([23 57])
     shading interp %es para sacar las lineas negras
     colormap(jet(10)) %hay diferentes gamas de colores (winter, summer, jet, etc) y el '10' representa cuantos bloques de colores quiero
     colorbar
     
*** para guardar figura save figure png
    figure(2);subplot(2,1,1);plot(x,sol_num);title('Solucion final');print -dpng folder/fig.png
*** para guardar figura save figure pdf
    print -dpdf fig.pdf
*** sprintf y ademas save figure
**** ejemp seba
    de esta forma generamos un string y ese mismo nombre lo indicamos como nombre para guardar la figura
    % variables
    ee = 0.01;
    grPol = 2;
    
    t3 = sprintf('Convergencia Error - e = %d - Polinomio P_%d(x)',ee,grPol);
    figure(1);
    title(t3)
    print(fullfile('Figs',[t3,'.png']),'-dpng')
**** ejem nico indicando savefigure y titulo del caso
     caso = 'B06_alpha80';
     % Cdd2
     Md2 = [0, 0.95, 1, 1.05, 1.1, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.5];
     Cdd2_exp = [2.9, 2.9, 3.0, 3.1, 3.6, 6.5, 7.6, 7.3, 6.8, 6.1, 5.4, 4.4];

     figure();plot(Md2,Cdd2_exp,'+-');
     title_Cdd2=sprintf('Aprox Cddelta %s',caso);
     title(title_Cdd2);legend('Real','Estimacion');xlabel('Mach');ylabel('Cddd2');
     figname_Cdd2 = sprintf('Aprox_Cdd2_%s',caso);
     print(fullfile('Figures',[figname_Cdd2,'.png']),'-dpng')
*** legend
    legendas
    legend('ERROR','Converg LINEAL','Converg CUAD','location','SouthEast')

    legendas afuera de la graf
    legend('ERROR','Converg LINEAL','Converg CUAD','location','SouthEastOutside')
*** plot2Dfrom3D
    como hacer una proyecci'on 2D a partir de una graf 3D
**** example
% Se ejemplifica como obtener un proyecciones 2D a partir de un plot3D
%
clear all;clc;close all
y=0:0.1:80;
x = y/50.*cos(y);
z = y/50.*sin(y);
plot3(x,y,z, 'LineWidth', 2)
grid on
xlabel('x')
ylabel('y')
zlabel('z')
ylim([0, 100])
xlim([-2 2]);
zlim([-2 2]);

% aca obtenemos la proyeccion de la curva en los distintos planos
if 1
  hold on
  plot3(x, 100*ones(size(y)), z, 'LineWidth', 2); % project in x-z axis at y=100
  plot3(2*ones(size(x)), y, z, 'LineWidth', 2); % project in y-z axis at x=2
  plot3(x, y, -2*ones(size(x)), 'LineWidth', 2); % project in y-z axis at z=-2
end

*** plotear titulos con nombre y variables
*** plotear text y lineas dentro de la grafica
    figure(5)
    x = linspace(0,3);
    y =@(a) a.^2.*sin(a);
    plot(x,y(x))
    line([2,2],[0,y(2)])
    
    str = '$$ \int_{0}^{2} x^2\sin(x) dx $$';
    text(1.1,0.5,str,'Interpreter','latex')
*** script p plotear lineas de ejes 
    xL = xlim;
    yL = ylim;
    line([0 0], yL);  % y-axis
    line(xL, [0 0]);  % x-axis
*** otra forma de plotear lineas de ejes
    line([0 0], [-4 4]);  % y-axis
    line([-4 4], [0 0]);  % x-axis
**** sprintf
     sprintf-> se usa p crear texto a travez de variables

     grPol=2;
     oo=sprintf('Solucion EDO - Polinomio P_%d(x)\n',grPol);
     figure();title(oo)
**** vieja escuela
     grPol=2;
     figure();title(['Solucion EDO - Polinomio P_',num2str(grPol),'(x)'])
   
** fprint,sprint, disp
*** disp
    para poner numeros y strings
    e = 3;
    p=num2str(e);
    disp(['funcion base',p,'seg'])
*** fprintf
**** fprintf

    Utilice fprintf para mostrar directamente el texto sin crear una 
    variable. Sin embargo, para finalizar la visualización correctamente,
    debe finalizar el texto con el metacarácter de nueva línea (\n).

    name = 'Aldo Pedro';   
    age = 71;
    fprintf('%s will be %d this year.\n',name,age); 
    Alice will be 12 this year.

    %s= string | %d = entero 
**** como escribir symbolic con fprintf
    f = @(x) cos(pi*x/2)
    f_sym = sym(f);  % pasamo de function handle a symbolic
    fprintf('El resultado es f en symbolic,\n%s \n', char(pretty(f_sym)))%escribimos simbolic
**** ejem generico
     f = @(x) cos(pi*x/2)
     x0 = 0;xf = 1;
     f_sym = sym(f);
     y_sym = int(f_sym)
     fprintf('**Integral Symbolic\n%s\n**intervalo:\nx0 = %d \nXf = %d \n\n',char(pretty((y_sym))),x0,xf)

*** sprintf
    Utilice sprintf para crear texto pero se muestra con disp.
    
    name = 'Alice';   
    age = 12;
    X = sprintf('%s will be %d this year.',name,age);
    disp(X)
    Alice will be 12 this year.
**** fprintf simbolo %
     colocar el simbolo % tiene la complejidad ya que es un caracter que
     se usa para especificar el tipo de variable a imprimir, por lo cual
     si se desea usar como texto, hay dos posibilidades. 
     Incorporarlo como cadena de caracteres %s, '%' o como codigo ASCII
     %c,'%'
***** ej
      cl_num = 0.5682; cl_ref = 0.569;
      err_cl = ((cl_ref-cl_num)/cl_ref)*100;
      fprintf('\nCL=%d, Err relativo=%d%s.\n',cl_num,err_cl,'%')
      % otra alternativa con codigo ASCII
      fprintf('Otra alternativa con codigo ASCII\n')
      fprintf('CL=%d, Err relativo=%d%c.\n',cl_num,err_cl,'%')
** handle function
   es un puntero a una funcion, tmb se la conoce como funci'on an'onima
   se usa para pasar una funcion como argumento de otra funcion.
*** descripcion
    funci\'on del tipo functionHandle, es decir una funci\'on an\'onima. Una funci\'on
    an\'onima es una funci\'on que no se encuentra almacenada en el archivo de programa, 
    pero est\'a asociada a un tipo de variable denominado \textit{function handle}. Las 
    funciones an\'onimas aceptan m\'ultiples argumentos de entrada, pero devuelven un solo
    argumento de salida. La ventaja de este tipo de funciones es que no hay que realizar 
    ni mantener un archivo que solo requiere pocas sentencias. Esta es una de las principales
    ventajas de las funciones inc\'ognito, pero adem\'as existen otros usos, como ser:
    
    function handle en matlab
    Se designan con el operador $@$ y entre par\'entesis los argumentos de entrada, luego 
    de estos se coloca la ley de la funci\'on.

    Este tipo de funciones se usa para:
    - Pasar un funci\'on como argumento de otra funci\'on, lo que se conoce como "function-function"
    -  Para regresar a un men\'u en UI. Specifying callback functions (for example, a callback
    that responds to a UI event or interacts with data acquisition hardware).
    - Crear funciones an\'onimas, es decir crear funciones a manipuladores de funciones definidas
    inline en lugas del programa
    - Llama a funciones locales por afuera del main

    Las funciones an\'onimas "function Handle" se almacenan en el path absoluto, por lo que
    puedes invocar a la funci\'on desde cualquier ubicaci\'on. Es por esto que no se debe inidcar
    donde se encuentra ubicada la funci\'on cuando se crea la misma, sino solo con el nombre basta.

*** ej:
**** alternativa
     f = @(x) x.^2   % hacerla tipo inline
**** alternativa
     function y = computeSquare(x)
     y = x.^2;
     end
     %(en el main) Create a handle and call the function to compute the square of four.
     
     f = @computeSquare;
     a = 4;
     b = f(a)
**** transform funtion_handle to symbolic
     si no toma la funcion como sym hay que transformarla de function_handle a sym
     y=@(x,t) x^2+3*x-t
     p=sym(y)

** hdf5
   Hierarchical Data Format (formato de datos jerárquico), is a set (struct) of file formats designed to store large amount of data
*** open hdf5
    file = hdf5info('Data_vacio.hdf5');
    inertial_coord_vacio = hdf5read(file.GroupHierarchy.Datasets(4));
    time = hdf5read(file.GroupHierarchy.Datasets(6));
** gradient
   Calculate the gradient of sampled data or a function.  If M is a
   vector, calculate the one-dimensional gradient of M.
   [DX, DY] = gradient (M)' calculates the one dimensional gradient
   for X and Y direction if M is a matrix
   example
   [X,Y] = meshgrid(-2:.2:2);
   Z = X.*exp((-X.^2 - Y.^2));
   [DX,DY] = gradient(Z,.2,.2);
   figure();contourf(X,Y,Z);hold on;quiver(X,Y,DX,DY);colormap jet
   figure();contour(X,Y,Z);hold on;quiver(X,Y,DX,DY);colormap jet
   hold on
   quiver(X,Y,DX,DY)
   grid off
   hold off
  
** mldivide
   es la barra invertida x=A\b, ver tmb linsolve
   Resuelve un sistema de ecuaciones lineales, tiene un algoritmo para optimizar
   dependiendo de como es la matriz.
   Por ejemplo, se fija si es diagonal, si no es triangular usa solver de bandas,
   puede usar LU, Choleski, hessenberg. Ver algoritmo de entradas en matlab!!
** linsolve
   ver tmb  la barra invertida es "mlderiv"
   resuelve un sistema lineal A*x = b -> x = A\b,
   si no se aclara nada, octave recorre la matriz y optimiza la inv, 
   sino con OPTS, se le indica el tipo de matriz y optimiza la inversa
   R = # de condicion de A

   OPTS: 
   LT  ->  A is lower triangular
   UT  ->  A is upper triangular
   SYM ->   A is symmetric or complex Hermitian (currently makes no
   difference)
   UHESS  -> A is upper Hessenberg (currently makes no difference)
   POSDEF -> A is positive definite
   RECT   -> A is general rectangular (currently makes no difference)
   TRANSA -> Solve 'A'*x = b' by 'transpose (A) \ b'

   [X, R] = linsolve (A, b, OPTS)
   
** linspace
   genera una sucecion entre x0 y xf de N ptos
   p=linspace(0,1,10)
** load files, leer data inputs
*** carga de txt
   % Colocar nombre del caso a analziar el CD
   caso = 'B06_alpha80';
   % maquinaria para cargar datos en funcion del nombre del caso
   folder_path=('/home/zeeburg/Documents/CIMEC/Tesis/estimacion/Resu_RBD/');
   path_file = fullfile([folder_path],['Force_coef_proc_',caso,'.txt']);
   fprintf('\nSe cargan los datos de CD del archivo:\n%s\n',path_file)
   
   data = load(path_file);
   mach_cd = data(:,2);
   alfa_cd = data(:,3);
   delta2 = data(:,5);
   CD = data(:,6);

*** carga de hdf5
    load -f /home/zeeburg/Documents/CIMEC/investigaciones222/Data_wingnut_Dzhanibekov_effect.hdf5
    w = reshape(Body_ang_vel,3,[])'; 
    % con la variable 'whos' se todas las variables en el workspace
** log
   log es la funcion de logaritm
   log(x)-> logaritmo natural o neperiano
   log10(x)-> log en base 10
   log2(x) -> log base 2
   log1p(x)-> Compute log(1+x) accurately for small values of x
** magic() 
   es una logica que no se repite y la suma de las filas y col 
   es la misma

** mesgrid
   genera una malla apartir de dos vectores
   x=linespace(-1,1,20)
   [X,Y]meshgrid(x,x)
** matriz sparse
   full(k) % me genera una matriz full a partir de una sparse
*** rala
    para ver que tan rala es una matriz sparce
    S = matriz sparse, rho = % de cuan rala es la matrix
    rho = nnz(S)/prod(size(S))
** matrix_type
** nnz 
   te da la cant de los elem no ceros de la matrix
   nnz(S)
** objetos moviendose
*** hgtransform
    Create transform object
*** makehgtform
    creates transform matrices for translation, scaling, and rotation of graphics objects
**** ej
     ax = axes('XLim',[-1.5 1.5],'YLim',[-1.5 1.5],'ZLim',[-1.5 1.5]);
     view(3)
     grid on;
     t = hgtransform('Parent', ax);
     [x,y,z] = cylinder([.2 0]);
     h(1) = surface(x,y,z,'FaceColor','white');
     h(2) = surface(x,y,-z,'FaceColor','white');
     h(3) = surface(z,x,y,'FaceColor','white');
     h(4) = surface(-z,x,y,'FaceColor','white');
     h(5) = surface(y,z,x,'FaceColor','white');
     h(6) = surface(y,-z,x,'FaceColor','white');
     set(h,'Parent',t)
     for r = 1:.1:2*pi
     % Z-axis rotation matrix
     Rz = makehgtform('zrotate',r);
     % Scaling matrix
     Sxy = makehgtform('scale',r/4);
     % Concatenate the transforms and
     % set the transform Matrix property
     set(t,'Matrix',Rz*Sxy)
     pause(0.1)
     drawnow
     end
** ordenamiento vectores/matrices
*** sort
    devuelve el arreglo ordenado de forma descendente
**** ej
     % reordena una matriz en forma descendente
     X = [10 3 6  8;
     12 5 9  2;
     66 4 7 11];

     [rows, columns] = size(X)
     sorted_X = reshape(sort(X(:), 'descend'), [columns, rows])'
*** unique
    unique, ordena de forma ascendente un vector que tiene valores repetidos
**** ej
   a = [9 2 9 5];
   b = unique(a)
** pause
   suspend the executin of the program for N seconds
   pause(0.01)
** path
*** load path
    cargamos el path donde se ubican las funciones
    addpath('~/Documents/CIMEC/Cursos/FEM/pract/funciones_auxiliares/')
** quiver3
   % plotea vectores en 3D, 
   example
   [x, y, z] = peaks (25);
   surf (x, y, z);
   hold on;
   [u, v, w] = surfnorm (x, y, z / 10);
   h = quiver3 (x, y, z, u, v, w);
   set (h, "maxheadsize", 0.33);
** quiver
   % plotea vectores en 2D
   quiver(x1(1),x1(2),x12_new(1),x12_new(2),0,'m*')
   % hay que poner ,'autoscale','off') o 0 para que no escale el vector,
   o sino '*' para que en lugar de una flecha ponga un asterisco
   % example:
   [x, y] = meshgrid (1:2:20);
   h = quiver (x, y, sin (2*pi*x/10), sin (2*pi*y/10));
   set (h, "maxheadsize", 0.33);
   
** spy
   te grafica los elem no nulos de la matriz de la matriz
   spy(A)
** surfnorm
   %Find the vectors normal to a meshgridded surface. The meshed 
   gridded surface is defined by X, Y, and Z.

   %example
   figure()
   [X,Y] = meshgrid(-2:.2:2);
   Z = X.*exp((-X.^2 - Y.^2));
   [U,V,W] = surfnorm(X,Y,Z);  % importante !!
   quiver3(X,Y,Z,U,V,W,0.5);
   hold on
   surf(X,Y,Z);
   colormap hsv
   view(-35,45)
   axis ([-2 2 -1 1 -.6 .6])
   hold off
** syms
   symbolic, see algo how to change from symbolic to matlab expression
*** diff
    deriva funcion
    d_phi1=diff(phi1,x);    %d_phi1/dx
*** int
    integra fiuncion, tanto definida como indefinida
**** integral indef en funcion de x
     y=@(x) x^2+3*x-t
     A11 = int(y,x)
     si no toma la funcion como sym hay que transformarla de function_handle a sym
     y=@(x) x^2+3*x-t
     p=sym(y)
**** integral definida
     y=@(x) x^2+3*x-t
     A11 = int(y,0,2);
**** integrales por parte
     syms u(x) v(x)
     F = int(u*diff(v))
     g = integrateByParts(F,diff(u))

     link -> https://www.mathworks.com/help/symbolic/integratebyparts.html
     
*** pretty 
    visualiza mejor la ecuaci'on
    pretty(A)
*** subs
    substituye valores
    ej:
    phi1=subs(subs(subs(phi1,x1,0),x2,h),x3,0);     % phi1
    % no es necesario hacer uno x uno, se le puede pasar una celda de los valores a substituir

    A = [1 x1 y1 x1^2 x1*y1 y1^2;
         1 x2 y2 x2^2 x2*y2 y2^2;
	 1 x3 y3 x3^2 x3*y3 y3^2;
	 1 x4 y4 x4^2 x4*y4 y4^2;
	 1 x5 y5 x5^2 x5*y5 y5^2;
	 1 x6 y6 x6^2 x6*y6 y6^2];
	 
     % matrix evaluada en los nodos del triangulo master
     ANum = subs(A,{x1,y1,x2,y2,x3,y3,x4,y4,x5,y5,x6,y6},{0,0,1,0,0,1,0.5,0,0.5,0.5,0,0.5})
    
*** simplify
    simplifica ecuacion usando las reglas de maple
    phi3=simplify(phi3);    
    % --------------------------------
    simplify
    y = sin(x)^2+cos(x)^2
*** simple
    simple
    simplifica a la opci'on m'as corta
    % medio similar a simplify
*** factor
    factoriza una expresion en symbolic
    factor(ANum(1)) factoriza en simbolico
    y = 2*(x+3)^2/(x^2+6*x+9)
    y1 = factor(y)
    % --------------------------------
    syms x
    p = expand((x-5)*(x+5))
    y = factor(p)
**** ej
     syms x
     y = 2*(x+3)^2/(x^2+6*x+9)
     p = factor(y)
     ---------------------------------------------
     % otro ejemplo
     syms x
     f = x^2-1
     p=factor(f)
     pretty(p)
     pp=matlabFunction(p) % pasamos la expresi'on symbolic a expresi'on de funci'on
     pp(2)  % evaluamos la funci'on en x=2
     % notar que se paso de una clase simb'olica a una funcion y luego se evaluo
*** expand
    multiplica todas las operaciones de la expresion
    syms x
    expand((x-5)*(x+5))

*** collect
    agrupa t'erminos similares
    S=2*(x+3)^2+x^2+6*x+9
    collect(S)
*** numden
    encuentra el numerador y el denominador de una expresi'on , esta eq no es v'alida para ecuaciones
    syms x
    S = (x+5)/(x-5)
    [num,dem]=numden(S)
*** findsym
    encuentra y muestra las variables symbolicas en una ecuacion
    syms x
    t=4;
    p = x^2+t+2*x;
    findsym(p)
*** sym2poly
    transforma un simbolic en polinomio, x ejem p sacar raiz
**** ej
     % para sacar el pol carac de la siguiente matriz (autovalores)
     syms lambda
     A=[4/5 -3/5 0;3/5 4/5 0;1 2 2]
     pp=A-lambda*eye(3)
     ll = det(pp); % pol caract
     pol=sym2poly(ll)
     roots(pol)
     % otra forma de sacar raiz
     solve(ll,0)
*** solve
    resuelve eq p simbolico
*** matlabFunction
    pasa de simbolico a handle funcion, es decir a partir de una funcion
    simbolica, hace un puntero la funcion, tmb crea una funci'on an'onima
**** ej 
    syms h
    A_sym = [h;1/h;h^2]
    f = matlabFunction(A_sym);
    dx = 0.5;
    A_num = f(dx)
    whos A_sym
    whos A_num
*** sym2double
    para transformar un symbolic en double hay:
**** ej
     syms x
     f = x.^2
     fs = subs(f,x,2)
     f2d = double(fs)    
** symrc
   Return the symmetric reverse Cuthill-McKee permutation of S.  P is
   a permutation vector such that 'S(P, P)' tends to have its diagonal
   elements closer to the diagonal than S.  This is a good preordering
   for LU or Cholesky factorization of matrices that come from "long,
   skinny" problems
   
** struct
   son arreglos de multiples variables (celdas) y de multiples dimensiones. B'asicamente es una celda de multiples dimensiones. Se identifican 
   con campos (fields)
   
   Se accede con el nombre de la estructura, () la ubicaci'on y por ultimo el campo
   estructure_name(location).field
*** example
    a = [1 2 3;4 5 6]
    s = 'el sapo pepe'
    t = [1:4]

    est.nombre = s
    est.vector = a
    est.tiempo = t
    % le incorporamos un nuevo elemento al campo nombre
    est(2).nombre = 'balto el rope'
    
    est   
** video
   %% Animaciones en MatLab
   clear
   clc
   close all
   
   %% Datos con los que voy a trabajar (en este caso a modo de ejemplo se va a animar una particula siguiendo una trayectoria helicoidal)
   
   t=linspace(0, 2*pi, 100);
   x=5*cos(t);
   y=2*sin(t);
   z=t;
   
   %% Dibujo la informacion
   
   figh=figure;
   
   for i=1:length(t)
    % Al principi ''limpio'' el grafico
    clf % Clear the Figure
    
    % Obtengo la ubicacion punto a punto de la particula
    t_i=t(i);
    x_i=x(i);
    y_i=y(i);
    z_i=z(i);
    
    % ploteo la ubicacion de la particula
    plot3(x_i,y_i,z_i, 'go', 'LineWidth', 3, 'MarkerSize', 10)
    
    % A su vez, ploteo la trayectoria completa
    hold on
    plot3(x,y,z,'b-', 'LineWidth',2)
    
    % Detalles del grafico
    grid on
    xlabel('x')
    ylabel('y')
    zlabel('z')
    title(['Particula en el instante t= ', num2str(t_i),' segundos'])
    % view ([30 30])
    view ([30+20*t_i 30]) % esto haria rotar el video a medida que transcurre el tiempo
    
    % MatLab es 'inteligente' de cierta manera y ahorra memoria ploteando
    % solamente la ultima posicion, para hacer la animacion debemos
    % 'forzar' a MatLab a dibujar ploteo por ploteo
    
    %drawnow % con esta opcion MatLab dibuja lo mas rapido posible
    %pause(0.1) % pausa el scrip por 'x' cantidad de segundos haciendo que MatLab tenga que plotear cada fotograma
    
    Video(i)=getframe(figh, [10 10 520 400]); % getframe lo que hace es ir guardando cada fotograma, en este caso se guarda en una variable llamada 'Video' 520x400 resolucion en pexil 10 10 la dist eje del fig a su vez cuando yo hago rotar la animacion, getframe selecciona automaticamente cierta cantidad de pixeles en cada figura, esto genera que, a la hora de hacer el archivo del video, se produzca un error, dado que las imagenes no coinciden en tama�o, por eso le especificamos: los dos primeros numeros indican cuan alejado estoy del origen izquierdo inferior, y los dos ultimos numero especifica cuantos por cuantos pixeles queiro tomar. figh en este caso es la figura a la que le estoy especificando la cantidad de pixeles qu quiero.
    end
    
    %% Guardar el video
    
    %VideoFinal= VideoWriter('Particula_siguiendo_trayectoria','MPEG-4'); % Esto es un objeto que me va a crear el archivo del video, por default guarda los archivos de video en .avi
    VideoFinal= VideoWriter('Particula_siguiendo_trayectoria'); % Esto es un objeto que me va a crear el archivo del video, por default guarda los archivos de video en .avi
    VideoFinal.FrameRate= 20; % Digo que quiero 20fps
    
    % Abro el objeto, guardo el video y cierro el objeto
    open(VideoFinal); % abro el objeto
    writeVideo(VideoFinal,Video); % Al objeto le paso la informacion necesaria para que guarde el video
    close(VideoFinal);% cierro el objeto
** workspace 
   entorno de variables 
*** save
    workspace.mat
*** load
    load name.mat
*** transfer workspace octave2matlab
    in octave, .mat is a binary file at all, it is in fact a text file format that Octave developed for itself. por lo tanto cuando lo queremos abrir en matlab paratalea xq no es un archivo binario. para eso en octave hay que indicarle que lo guarde como binario, es se hace:
    save -mat7-binary 'workspace_octave.mat'
    Si todo esta OK, funciona, pero a veces patalea con las funciones handles, por lo tanto hay que guardar el workspace, y si tira error, eliminar las variables problematicas una x una con clear name.
** whos
   para saber cuanto ocupa en memoria y adem'as que tipo de variable es
   k=zeros(3)
   whos k

* prog
** ah
   od
** o
